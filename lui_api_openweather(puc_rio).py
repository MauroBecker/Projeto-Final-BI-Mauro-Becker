# -*- coding: utf-8 -*-
"""LUI API OpenWeather(PUC-Rio).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NMN2HKdtaG-7jq9ff62cB4hjzxk8eIG9

# OpenWeather
cadastro:
https://home.openweathermap.org/

Token: 759456928ed37e410c5e67cbb0e81b59
"""

import requests
import json
import pandas as pd

# #cria df - SÓ IRÁ FAZER ISSO UMA VEZ!!!
df_temp = pd.DataFrame(columns=['city_id', 'Local', 'dt', 'Data', 'Temp', 'humidity', 'clouds', 'description'])
df_temp.to_csv('out.csv', index=False, encoding="utf8")



#abre df
df = pd.DataFrame(columns=['city_id', 'Local', 'dt', 'Data', 'Temp', 'humidity', 'clouds', 'description']) #.read_csv('out.csv')
len_df = len(df)
print(len_df)
df.head()

# Colocar token criado aqui:
TOkEN = "759456928ed37e410c5e67cbb0e81b59"

# O que vamos mudar para procurar as informações!!!
city = "Santa Cruz do Sul"
state = "RS"

# Requisição para obtermos o city_id

city_url = "http://apiadvisor.climatempo.com.br/api/v1/locale/city?name=" + str(city) + "&state=" + str(state) + "&country=BR&token=" + str(TOkEN)
print("city_url: ", city_url)
print("\n")
response = requests.request("GET", city_url)
print("response ",response)
return_request  = json.loads(response.text)
print(return_request)
print("\n")

#Requisições para de fato termos a previsão do tempo para um determinado local

for key in return_request:
    city_id = key['id']

    try:

      register_url = "http://apiadvisor.climatempo.com.br/api-manager/user-token/" + str(TOkEN) + "/locales"
      payload = "localeId[]=" + str(city_id)
      headers = {'Content-Type': 'application/x-www-form-urlencoded'}
      response = requests.request("PUT", register_url, headers=headers, data=payload)

      print(response.text)

      weather_url = "http://apiadvisor.climatempo.com.br/api/v1/weather/locale/" + str(city_id) + "/current?token=" + str(TOkEN)
      print(weather_url)
      weather = requests.request("GET", weather_url)
      return_weather = json.loads(weather.text)
      print(return_weather)

      # Salva no df
      len_df = len(df)
      df.loc[len_df] = [str(return_weather["name"])] + [str(return_weather['data']["date"])] + [str(return_weather['data']["temperature"])+"ºC"] + [str(return_weather['data']["humidity"])+"%"] + [str(return_weather['data']["condition"])]
      print(df.head())
      #break
    except:
      continue

df.head()

#Requisições para dados historicos do tempo para um determinado local

for key in return_request:
    city_id = key['id']

    try:

      register_url = "http://apiadvisor.climatempo.com.br/api-manager/user-token/" + str(TOkEN) + "/locales"
      payload = "localeId[]=" + str(city_id)
      headers = {'Content-Type': 'application/x-www-form-urlencoded'}
      response = requests.request("PUT", register_url, headers=headers, data=payload)

      print(response.text)

      weather_url = "http://apiadvisor.climatempo.com.br/api/v1/weather/locale/" + str(city_id) + "/current?token=" + str(TOkEN)
      print(weather_url)
      weather = requests.request("GET", weather_url)
      return_weather = json.loads(weather.text)
      print(return_weather)

      # Salva no df
      len_df = len(df)
      df.loc[len_df] = [str(return_weather["name"])] + [str(return_weather['data']["date"])] + [str(return_weather['data']["temperature"])+"ºC"] + [str(return_weather['data']["humidity"])+"%"] + [str(return_weather['data']["condition"])]
      print(df.head())
      #break
    except:
      continue



"""### No final de tudo, salvar csv novo:"""

df.to_csv('out.csv', index=False, encoding="utf8")





"""# EXTRA"""

# O que vamos mudar para procurar as informações!!!
city = "Rio de Janeiro"
state = "RJ"

# Requisição para obtermos o city_id

city_url = "http://apiadvisor.climatempo.com.br/api/v1/locale/city?name=" + str(city) + "&state=" + str(state) + "&country=BR&token=" + str(TOkEN)
print("city_url: ", city_url)
print("\n")
response = requests.request("GET", city_url)
return_request  = json.loads(response.text)
print(return_request)
print("\n")

response

df_new = pd.DataFrame(columns=['local', 'data', 'prob_chuva', 'precipitacao_chuva', 'temp_min', 'temp_max', 'text_pt', 'resumo', 'madrugada', 'manha', 'tarde', 'noite'])
len_df_new = 0

for key in return_request:
  try:
    city_id = key['id']

    register_url = "http://apiadvisor.climatempo.com.br/api-manager/user-token/" + str(TOkEN) + "/locales"
    payload = "localeId[]=" + str(city_id)
    headers = {'Content-Type': 'application/x-www-form-urlencoded'}
    response = requests.request("PUT", register_url, headers=headers, data=payload)

    print(response.text)


    weather_forecast_url = "http://apiadvisor.climatempo.com.br/api/v1/forecast/locale/" + str(city_id) + "/days/15?token=" + str(TOkEN)
    weather_forecast = requests.request("GET", weather_forecast_url)
    return_weather_forecast = json.loads(weather_forecast.text)
    print("-----")
    print(return_weather_forecast)
    print("-----")

    name_state = return_weather_forecast['name']

    for data_weather_forecast in return_weather_forecast['data']:
      date_br = str(data_weather_forecast['date_br'])
      rain_probability = data_weather_forecast['rain']['probability']
      rain_precipitation = data_weather_forecast['rain']['precipitation']
      temperature_min = data_weather_forecast['temperature']['min']
      temperature_max = data_weather_forecast['temperature']['max']

      text_pt = data_weather_forecast['text_icon']['text']['pt']
      phrase_reduced = data_weather_forecast['text_icon']['text']['phrase']['reduced']
      phrase_dawn = data_weather_forecast['text_icon']['text']['phrase']['dawn']
      phrase_morning = data_weather_forecast['text_icon']['text']['phrase']['morning']
      phrase_afternoon = data_weather_forecast['text_icon']['text']['phrase']['afternoon']
      phrase_night = data_weather_forecast['text_icon']['text']['phrase']['night']


      len_df_new = len(df_new)
      df_new.loc[len_df_new] = [name_state]+[str(date_br)] + [rain_probability]+[rain_precipitation]+[temperature_min]+[temperature_max]+[text_pt]+[phrase_reduced]+[phrase_dawn]+[phrase_morning]+[phrase_afternoon]+[phrase_night]
  except:
    continue

df_new.head(20)



